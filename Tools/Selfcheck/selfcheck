#!/usr/bin/env bash
################################################################################
#
# Magma-UT
# Copyright (C) 2020 Ulrich Thiel
# Licensed under GNU GPLv3, see COPYING.
# https://github.com/ulthiel/magma-ut
# thiel@mathematik.uni-kl.de, https://ulthiel.com/math
#
# Run automatic selfcheck on a package. This is quite a nice and generic script
# actually.
#
# ./selfcheck -p PACKAGE_NAME (SELFCHECK1 SELFCHECK2 ...)
#
# e.g.
#
# ./selfcheck -p Magma-UT Files MD5 Strings
#
# Running
#
# ./selfcheck -p Magma-UT
#
# runs all selfchecks.
#
# If -r option is given, reporting is activated.
#
# This script needs to be started from this folder to not mess up paths.
# It will then load the files given as arguments into Magma and
# report any errors, also things like when a command didn't exist.
#
# The Magma session is initialized with logging enabled and the logfile
# will be parsed afterwards. Also SetQuitOnError is activated. When the
# keyword "error" is found in the log, this will be reported.
#
# You should write your selfchecks in a way that it throws errors when
# something is not correct. You can e.g. use
#
# assert X eq Y;
#
# If X is not equal to X, this throws an error. You should look at the
# examples in Packages/Magma-UT/Selfchecks.
#
################################################################################

# First, make sure this script is run from the Selfcheck directory.
# I need this to have less fiddling below.
if [ ! -f "../../magma-ut" ]; then
  echo Error: you need to run this script directly from the Tools/Selfcheck directory.
  exit 1
fi

# Parse arguments
while [[ $# -gt 0 ]]
do
  arg="$1"
  case $arg in
    -r)
    REPORT=YES
    shift # Remove --report from processing
    ;;
    -p)
    PACKAGE="$2"
    shift # Remove argument name from processing
    shift # Remove argument value from processing
    ;;
    *)
    SELFCHECKS="$SELFCHECKS $1"
    shift # Remove generic argument from processing
    ;;
  esac
done

# Check if package specified
if [ -z ${PACKAGE+x} ]; then
  echo "Please specify package to selfcheck with -p option."
  exit 1
fi

# If reporting activated, get selfcheck token from Config file
if [ "$REPORT" == "YES" ]; then
  set -a
  . ../../Config/Config.txt
  set +a

  if [ -z ${MAGMA_UT_SELFCHECK_TOKEN+x} ]; then
    echo "Error: You selected reporting option. For security you need to define a selfcheck token in Config.txt"
    exit 1
  fi
fi

# If no selfcheck files given, take all of them
if [ -z ${SELFCHECKS+x} ]; then
  cd ../../Packages/$PACKAGE/Selfchecks/
  SELFCHECKS=`(echo *.m)`
  cd ../../../Tools/Selfcheck
fi

# Gather some system information for reporting
if [ "$REPORT" == "YES" ]; then

  HOST=`uname -n`

  #Determine OS version
  osrough=`uname -s`
  if [ "$osrough" == "Darwin" ]; then
    #Mac OS
    OS=`sw_vers -productName`
    VER=`sw_vers -productVersion`
  elif [ -f /etc/os-release ]; then
    # freedesktop.org and systemd
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
  elif type lsb_release >/dev/null 2>&1; then
    # linuxbase.org
    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)
  elif [ -f /etc/lsb-release ]; then
    # For some versions of Debian/Ubuntu without lsb_release command
    . /etc/lsb-release
    OS=$DISTRIB_ID
    VER=$DISTRIB_RELEASE
  elif [ -f /etc/debian_version ]; then
    # Older Debian/Ubuntu/etc.
    OS=Debian
    VER=$(cat /etc/debian_version)
  else
    # Fall back to uname
    OS=$(uname -s)
    VER=$(uname -r)
  fi
  OS_VER="$OS $VER"

  #CPU
  if [ "$osrough" == "Darwin" ]; then
  CPU=`sysctl -n machdep.cpu.brand_string`
  else
  CPU=`cat /proc/cpuinfo | grep 'model name' | tail -n 1 | awk -v FS=': ' '{print $2}'`
  fi

  # curl or wget?
  if command -v "curl" >/dev/null 2>&1; then
    DWN_TOOL="curl"
  elif command -v "wget" >/dev/null 2>&1; then
    DWN_TOOL="wget"
  else
    echo "Error: Neither curl nor wget found."
    exit 1
  fi

  #Magma-UT version
  git describe >/dev/null 2>/dev/null
  if [ $? -eq 0 ]; then
    MAGMA_UT_VER=`git describe`
  else
    cat ../../version.txt >/dev/null 2>/dev/null
    if [ $? -eq 0 ]; then
      MAGMA_UT_VER=`cat ../../version.txt`
    fi
  fi
fi

# Create Log directory
mkdir -p "Log/$PACKAGE"

# Determine maximal length of file name for nice printing
MAXLEN=0
for f in $SELFCHECKS; do
  NAME=${f##*/}
  NAME=${NAME%.m}
  len=${#NAME}
  if [ "$len" -gt "$MAXLEN" ]; then
    MAXLEN=$len
  fi
done

MAXLEN=$((MAXLEN + 2))

# Now, go through the selfchecks
for f in $SELFCHECKS; do

  NAME=${f##*/}
  NAME=${NAME%.m}
  DATE=`date -u +"%Y-%m-%d %H:%M:%S"`

  printf "%-${MAXLEN}s" $NAME

  touch "Log/$PACKAGE/$NAME.lck"

  # This is the initial Magma code to start and report the selfcheck
  INIT=$(cat << END
SetAssertions(1);
SetQuitOnError(true);
AttachSpec("../../Packages/$PACKAGE/$PACKAGE.s.m");
printf "MAGMA_UT_SELFCHECK_MAGMA=%o\n", GetVersionString();
MAGMA_UT_SELFCHECK_TIME := Cputime();
assert FileExists("../../Packages/$PACKAGE/Selfchecks/$NAME.m");
load "../../Packages/$PACKAGE/Selfchecks/$NAME.m";
printf "MAGMA_UT_SELFCHECK_TIME=%o\n", Cputime(MAGMA_UT_SELFCHECK_TIME);
printf "MAGMA_UT_SELFCHECK_MEM=%o\n", Round(GetMemoryUsage()/1000^2);
DeleteFile("Log/$PACKAGE/$NAME.lck");
quit;
END
  )

  rm -f Log/$PACKAGE/$NAME.log >/dev/null 2>&1

  echo "$INIT" | ../../magma-ut >Log/$PACKAGE/$NAME.log 2>&1

  RES=$?

  grep -q -i "error" "Log/$PACKAGE/$NAME.log"

  RESULT=0

  if [ -f Log/$PACKAGE/$NAME.lck ] || [ ! $RES -eq 0 ] || [ $? -eq 0 ]; then
    RESULT=1
    echo -e "\033[31;5;7mFAILED\033[0m"
  else
    TIME=`grep MAGMA_UT_SELFCHECK_TIME "Log/$PACKAGE/$NAME.log" | awk -F'=' '{print $2}'`
    MEM=`grep MAGMA_UT_SELFCHECK_MEM "Log/$PACKAGE/$NAME.log" | awk -F'=' '{print $2}'`
    echo -e "\033[0;32mOK\033[0m  ${TIME}s\t${MEM}MB"
  fi

  MAGMA_VER=`grep MAGMA_UT_SELFCHECK_MAGMA "Log/$PACKAGE/$NAME.log" | awk -F'=' '{print $2}'`

  # Report result
  if [ "$REPORT" == "YES" ]; then
    if [ "$RESULT" == "0" ]; then
    URL="https://ulthiel.com/magma-ut/selfcheck-commit.php?Date=$DATE&Package=$PACKAGE&Test=$NAME&Result=$RESULT&Time=$TIME&Memory=$MEM&PackageVer=$PKG_VER&MagmaVer=$MAGMA_VER&Host=$HOST&OS=$OS_VER&CPU=$CPU&Token=$MAGMA_UT_SELFCHECK_TOKEN"
  else
    URL="https://ulthiel.com/magma-ut/selfcheck-commit.php?Date=$DATE&Package=$PACKAGE&Test=$NAME&Result=$RESULT&PackageVer=$PKG_VER&MagmaVer=$MAGMA_VER&Host=$HOST&OS=$OS_VER&CPU=$CPU&Token=$MAGMA_UT_SELFCHECK_TOKEN"
  fi
  URL_ESC=`echo "$URL" | sed 's/ /%20/g'`

  $DWN_TOOL "$URL_ESC" >/dev/null 2>/dev/null
  fi

done

exit 0
